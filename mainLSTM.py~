if __name__ == '__main__':
    caffedl=caffeDL('/home/lzz/sign/proto/lenet_test.prototxt','/home/lzz/sign/model/lenet_iter_5000.caffemodel')
    #caffedl=caffeDL('/home/lzz/caffe/caffe-master/proto/lenet_test.prototxt','/home/lzz/sign/200d/lenet_iter_1800.caffemodel')
    caffedlInter=caffeDL('/home/lzz/sign/proto_inter/lenet_test.prototxt','/home/lzz/sign/model/lenet__iter_400.caffemodel')
    #caffedlInter=caffeDL('/home/lzz/sign/project/proto_inter/lenet_test.prototxt','/home/lzz/sign/project/model/inter_2/lenet__iter_300.caffemodel')
    classifier = Classifier()
    #pathTotal='/media/lzz/HD1/1Michael/split/301-610new/'
    #pathTotal='/media/lzz/HD1/1Michael/split/791-1000/'
    #pathTotal='/media/lzz/HD1/1Michael/split/1-23/'
    #pathTotal='/media/lzz/HD1/1Michael/split/new/'
    #pathTotal='/media/lzz/HD1/1Michael/split/new/301-610new/'
    #pathTotal='/media/lzz/HD1/1Michael/split/new/1-250/'
    #pathTotal='/media/lzz/HD1/1Michael/split/new/1-250/Aaron 1-180/'
    #pathTotal='/media/lzz/Data1/michael/301-400/'
    #pathTotal="/home/lzz/hand/"
    #pathTotal='/media/lzz/HD1/real/'
    #pathTotal='/home/lzz/sign/data/'
    #pathTotal='/media/lzz/Data1/kinect/'
    #pathTotal='/home/lzz//sign/data/'


    dataset='our'

    trainname={}
    testname={}

    if dataset=='devisign':
        #pathTotal='/media/lzz/Data1/devisign/'
        #pathTotal='/media/lzz/Data1/own/'
        pathTotal='/home/lzz/sign/data0/'
        trainname['P08']=0
        trainname['P02']=0
        trainname['P01']=0
        trainname['P07']=0
        #trainname['P01']=0
        testname['P03']=0
        classifier.listdevisign(pathTotal)
        classifier.splitdevisign(trainname,testname,'',0)
        #classifier.splitdevisign(trainname,testname,'P01',1)
    elif dataset=='our':
        #pathTotal='/home/lzz/sign/data/'
        pathTotal='/media/lzz/Data1/kinect/similardata/'
        #pathTotal='/media/lzz/HD1/newkinect/'
        trainname['hfy']=0
        trainname['fuyang']=0

        trainname['lzz']=0
        testname['Aaron']=0
        #classifier.listFile(pathTotal)
        #classifier.split(trainname,testname,'xn',3)
        #classifier.split(trainname,testname,'lzz',1)
        dic={}
        dic['Aaron']=0
        dic['Michael']=0
        dic['Micheal']=0
        classifier.listFile(pathTotal)
        classifier.split(trainname,testname,dic,0)

    classifier.constructLabelData()
    classifier.label2Name={}
    for path in classifier.filelist:
        classifier.label2Name[classifier.dic[path].label]=classifier.dic[path].wordName




    #for path in classifier.filelist:
    #    classifier.buildDic(path,0)

    mode=2


    #1:test;2:save model
    wholeMode=1


    classifier.getBothSeparate()
    if mode==2:
        classifier.getInter()








    classifier.getVelo()
    #for f in classifier.filelist:
    #    print classifier.dic[f].path,classifier.dic[f].intersect,classifier.dic[f].bothseparate,classifier.dic[f].shouldgenerate
    classifier.checkType()

    for path in classifier.filelist:
        txt=open(classifier.dic[path].path+"/type.txt",'w')
        if classifier.dic[path].intersect==1 and classifier.dic[path].shouldgenerate==0:
            txt.write("intersect")
        if classifier.dic[path].bothseparate==1:
            txt.write("both")
        if classifier.dic[path].shouldgenerate==1:
            txt.write("generated")
        txt.close()

    classifier.getVelocity()

    classifier.findTopHandshape()

    classifier.constructTrajectory()

    #classifier.getHogFeature()


    #[[train1,train2,train3],[target1,target2,target3],[t1,t2,t3]],[[test1,test2,test3],[testtarget1,testtarget2,testtarget3],[t1,t2,t3]]=classifier.preLSTM()
    #classifier.trainWholeCombineFeature()

    #classifier.trainWhole()
    #classifier.prewhole()
    #classifier.trainWholeLevelFeature()

    #classifier.trainLSTM()
    #classifier.testLSTM(test1,test2,test3,testtarget1,testtarget2,testtarget3,t1,t2,t3)
